Awesome! Let’s dive in **step-by-step**, **line-by-line**, starting with the most essential feature:

---

# ✅ STEP 1: User Signup and Login (Spring Boot + JWT)

This is the **authentication system**. Users can:

* **Sign up** with email and password
* **Login** and receive a **JWT token**
* This token will be used for all future requests

---

## 🔹 1.1: Create `User` Entity (Model)

📄 `User.java`

```java
import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment ID
    private Long id;

    @Column(nullable = false, unique = true)
    private String email;

    private String name;

    @Column(nullable = false)
    private String password; // will store encrypted (hashed) password
}
```

🔍 What this does:

* `@Entity`: declares this is a database table
* `@Id` and `@GeneratedValue`: creates primary key
* `@Column`: defines fields like `email`, `password`

---

## 🔹 1.2: Create a Repository for `User`

📄 `UserRepository.java`

```java
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
}
```

🔍 Why?

* This lets us **find users by email** when logging in.

---

## 🔹 1.3: Create Auth Request and Response DTOs

📄 `AuthRequest.java`

```java
import lombok.Data;

@Data
public class AuthRequest {
    private String email;
    private String password;
}
```

📄 `AuthResponse.java`

```java
import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class AuthResponse {
    private String token;
}
```

🔍 DTO = Data Transfer Object. Used to move login/signup data around.

---

## 🔹 1.4: JWT Utility Class

📄 `JwtTokenProvider.java`

```java
import io.jsonwebtoken.*;
import org.springframework.stereotype.Component;
import java.util.Date;

@Component
public class JwtTokenProvider {

    private final String JWT_SECRET = "mysecretkey";
    private final long JWT_EXPIRATION = 86400000; // 1 day in ms

    // Generate token
    public String generateToken(String email) {
        Date now = new Date();
        Date expiry = new Date(now.getTime() + JWT_EXPIRATION);

        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(now)
                .setExpiration(expiry)
                .signWith(SignatureAlgorithm.HS512, JWT_SECRET)
                .compact();
    }

    // Extract email from token
    public String getUsernameFromToken(String token) {
        return Jwts.parser()
                .setSigningKey(JWT_SECRET)
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    // Validate token
    public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(JWT_SECRET).parseClaimsJws(token);
            return true;
        } catch (JwtException ex) {
            return false;
        }
    }
}
```

🔍 This class:

* Creates JWT tokens with `.generateToken()`
* Extracts email using `.getUsernameFromToken()`
* Verifies tokens are valid

---

## 🔹 1.5: Authentication Service

📄 `AuthService.java`

```java
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtTokenProvider jwtProvider;

    public void register(String name, String email, String password) {
        User user = new User();
        user.setName(name);
        user.setEmail(email);
        user.setPassword(passwordEncoder.encode(password));
        userRepository.save(user);
    }

    public String login(String email, String rawPassword) {
        User user = userRepository.findByEmail(email)
            .orElseThrow(() -> new RuntimeException("User not found"));

        if (!passwordEncoder.matches(rawPassword, user.getPassword())) {
            throw new RuntimeException("Invalid credentials");
        }

        return jwtProvider.generateToken(email);
    }
}
```

🔍 This service:

* Registers new users and hashes their password
* Logs in users and returns a JWT token

---

## 🔹 1.6: Authentication Controller

📄 `AuthController.java`

```java
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthService authService;

    @PostMapping("/signup")
    public String signup(@RequestBody AuthRequest request) {
        authService.register("User", request.getEmail(), request.getPassword());
        return "User registered";
    }

    @PostMapping("/login")
    public AuthResponse login(@RequestBody AuthRequest request) {
        String token = authService.login(request.getEmail(), request.getPassword());
        return new AuthResponse(token);
    }
}
```

---

## 🔹 1.7: Security Configuration

📄 `SecurityConfig.java`

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.*;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public AuthenticationManager authManager(HttpSecurity http) throws Exception {
        return http.getSharedObject(AuthenticationManagerBuilder.class).build();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**").permitAll()
                .anyRequest().authenticated()
            );

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

---

## ✅ Now you can:

* POST to `/api/auth/signup` with `{ "email": "...", "password": "..." }`
* POST to `/api/auth/login` and get a token

---

If you’re ready, we can go next to **STEP 2: PDF File Upload & Storage** — want me to walk through that too?
